#!/usr/bin/env perl
#
# genpalette - print a palette according to the specifics of the code
#
#   0 <= hue < 360
#   0 <= saturation <= 1
#   0 <= value <= 1
#
# for example,
#
#   ./genpalette | ./mkpalette -w 8 out.png && feh out.png

use 5.24.0;
use warnings;
use experimental 'signatures';
use Imager::Color;

# output method
my %emit = (
    # TODO pixel-ed should support GIMP palette format, or something
    # common or available like that...
    app => sub ( $index, $color ) {
        my ( $rr, $gg, $bb, undef ) = $color->rgba;
        printf
          "app.palette[%d] = &(SDL_Color){.r = 0x%02X, .g = 0x%02X, .b = 0x%02X, .a = 0};\n",
          $index, $rr, $gg, $bb;
    },
    mkpalette => sub ( $index, $color ) {
        my ( $rr, $gg, $bb, undef ) = $color->rgba;
        printf "#%02X%02X%02X\n", $rr, $gg, $bb;
    },
);
my $method = shift          // 'mkpalette';
my $emit   = $emit{$method} // die "genpalette: no such method '$method'\n";

# TWEAK
my $max = 7;
for my $i ( 0 .. $max ) {
    my $c = Imager::Color->new( hue => 0, s => 0, v => $i / $max );
    $emit->( $i, $c );
}
# 0 as a value is pretty unusable for anything but black
#            0   1   2   3   4   5   6   7
my @hue = qw{0 120 120 120 120 120 120  60};
for my $i ( 0 .. $max ) {
    my $c = Imager::Color->new( hue => $hue[$i], s => 0.5, v => $i / $max );
    $emit->( 8 + $i, $c );
}
